# parser_service.py
import asyncio

from DataMining_service.services.ReviewService import ReviewService
from ReviewParser import ReviewMonitor as RM
from DataMining_service.shemas.review import ReviewCreate
from DataMining_service.core.database import get_async_session
from DataMining_service.core.broker import KafkaBrokerManager
from DataMining_service.raw_repository import RawReviewRepository


parser = RM()


async def create_review_service():
    """–°–æ–∑–¥–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å—ã—Ä—ã–º–∏ –æ—Ç–∑—ã–≤–∞–º–∏"""
    async for session in get_async_session():
        kafka_broker = KafkaBrokerManager()
        await kafka_broker.connect()

        try:
            repo = RawReviewRepository(session)
            review_service = ReviewService(kafka_broker, repo)
            yield review_service
        finally:
            await kafka_broker.close()
            await session.close()
        break


async def get_and_publish_reviews():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã –∏–∑ –ø–∞—Ä—Å–µ—Ä–∞ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Ö:
    1. –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–ª –ø–æ —Ç–µ–∫—Å—Ç—É
    2. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü—É raw_reviews
    3. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ Kafka —Ç–æ–ø–∏–∫ raw_reviews –¥–ª—è ML –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    result = parser.get_new_reviews()

    if result and result.get("reviews"):
        print(f"üì• –ü–æ–ª—É—á–µ–Ω–æ {len(result['reviews'])} –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –∏–∑ –ø–∞—Ä—Å–µ—Ä–∞")

        async for review_service in create_review_service():
            success_count = 0
            error_count = 0

            for review in result["reviews"]:
                try:
                    serialized_review = ReviewCreate(
                        source=review["source_id"],
                        text=review["text"],
                        datetime_review=review["datetime_review"],
                        city=review.get("city"),
                        region=review.get("region"),
                        region_code=review.get("region_code")
                    )

                    response = await review_service.create_review(serialized_review)

                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∑—ã–≤–∞: {e}")

            break
    else:
        print("üì≠ –ù–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ—Ç")


async def main():
    try:
        await get_and_publish_reviews()
        print("–ü–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
    except Exception as e:
        print(f"–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞: {e}")


if __name__ == "__main__":
    asyncio.run(main())
