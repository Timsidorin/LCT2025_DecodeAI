# ReviewService.py
from typing import Optional
from uuid import UUID
from datetime import datetime

from DataMining_service.core.broker import KafkaBrokerManager
from DataMining_service.raw_repository import RawReviewRepository
from DataMining_service.shemas.review import ReviewCreate, RawReviewResponse
from DataMining_service.services.GenderDetector import GenderDetector


class ReviewService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å—ã—Ä—ã–º–∏ –æ—Ç–∑—ã–≤–∞–º–∏:
    1. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª–∞ –ø–æ —Ç–µ–∫—Å—Ç—É
    2. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É raw_reviews
    3. –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Kafka —Ç–æ–ø–∏–∫ raw_reviews –¥–ª—è ML –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """

    def __init__(self, broker: KafkaBrokerManager, repo: RawReviewRepository):
        self.broker = broker
        self.repo = repo
        self.gender_detector = GenderDetector()

    async def create_review(self, review: ReviewCreate) -> RawReviewResponse:
        """
        –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—ã—Ä–æ–π –æ—Ç–∑—ã–≤ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ–ª–∞, –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π –≤ Kafka –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î
        """
        datetime_review = review.datetime_review or datetime.utcnow()

        gender = review.gender
        if not gender:
            gender = self.gender_detector.detect_gender(review.text)
            print(f"üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ–ª: {gender}")


        db_review = await self._save_to_database(review, datetime_review, gender)

        if not db_review:
            raise Exception("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞ –≤ –ë–î")
        await self._publish_to_kafka_for_ml(db_review)

        return self._build_response(db_review)

    async def _save_to_database(self, review: ReviewCreate, datetime_review: datetime, gender: Optional[str]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –≤ —Ç–∞–±–ª–∏—Ü—É raw_reviews"""
        try:
            db_review = await self.repo.add_raw_review(
                text=review.text,
                datetime_review=datetime_review,
                source=review.source,
                gender=gender,
                city=review.city,
                region=review.region,
                region_code=review.region_code
            )
            return db_review
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
            return None

    async def _publish_to_kafka_for_ml(self, db_review):
        """
        –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–∑—ã–≤–∞ –≤ Kafka —Ç–æ–ø–∏–∫ 'raw_reviews' –¥–ª—è ML –æ–±—Ä–∞–±–æ—Ç–∫–∏

        –§–æ—Ä–º–∞—Ç: {"data": [{"id": "uuid", "text": "—Ç–µ–∫—Å—Ç", "gender": "–ú"}]}
        """
        message = {
            "data": [
                {
                    "id": str(db_review.uuid),
                    "text": db_review.text,
                    "gender": db_review.gender,
                    "source": db_review.source,
                    "city": db_review.city,
                    "region": db_review.region,
                    "region_code": db_review.region_code,
                    "datetime_review": db_review.datetime_review.isoformat()
                }
            ]
        }

        try:
            await self.broker.publish(
                topic="raw_reviews",
                message=message,
                key=str(db_review.uuid).encode("utf-8")
            )
        except Exception as e:
            raise

    def _build_response(self, db_review) -> RawReviewResponse:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –ë–î"""
        return RawReviewResponse(
            uuid=db_review.uuid,
            source=db_review.source,
            text=db_review.text,
            gender=db_review.gender,
            city=db_review.city,
            region=db_review.region,
            region_code=db_review.region_code,
            datetime_review=db_review.datetime_review,
            created_at=db_review.created_at
        )
