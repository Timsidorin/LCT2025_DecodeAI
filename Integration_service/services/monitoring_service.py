
import asyncio
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
import httpx
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger
from apscheduler.triggers.cron import CronTrigger

from Integration_service.repository import ReviewAnalyticsRepository
from Integration_service.core.database import get_async_session
from Integration_service.schemas.processed_review import ReviewFilters
from Integration_service.core.config import configs

logger = logging.getLogger(__name__)


class ReviewMonitoringService:
    def __init__(self,
                 telegram_bot_url: str = None,
                 notification_threshold: int = 5,
                 check_interval_minutes: int = 2):

        self.telegram_bot_url = telegram_bot_url or getattr(configs, 'TELEGRAM_BOT_URL',
                                                            "http://localhost:8010/send-notification")
        self.notification_threshold = notification_threshold
        self.check_interval_minutes = check_interval_minutes
        self.scheduler = AsyncIOScheduler()

        self.last_notification_time = {}
        self.notification_cooldown_minutes = 60
        self.is_monitoring_enabled = bool(self.telegram_bot_url)

    async def start_monitoring(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if not self.is_monitoring_enabled:
            logger.warning("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω: –Ω–µ —É–∫–∞–∑–∞–Ω TELEGRAM_BOT_URL")
            return

        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–ª—É–∂–±—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Ç–∑—ã–≤–æ–≤ PulseAI")

        self.scheduler.add_job(
            func=self.check_negative_trends_by_products,
            trigger=IntervalTrigger(minutes=self.check_interval_minutes),
            id='negative_trends_monitoring',
            name='–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º',
            replace_existing=True,
            max_instances=1
        )

        self.scheduler.add_job(
            func=self.send_daily_report,
            trigger=CronTrigger(hour=9, minute=0),
            id='daily_report',
            name='–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç',
            replace_existing=True
        )

        self.scheduler.start()
        logger.info(f"üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ {self.check_interval_minutes} –º–∏–Ω—É—Ç")

    async def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        if self.scheduler.running:
            self.scheduler.shutdown(wait=False)
            logger.info("‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def check_negative_trends_by_products(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º"""
        try:
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º...")

            async for session in get_async_session():
                repo = ReviewAnalyticsRepository(session)

                recent_time = datetime.now() - timedelta(hours=2)
                filters = ReviewFilters(date_from=recent_time)

                products_stats = await repo.get_product_sentiment_analysis(
                    limit=10,
                    filters=filters
                )

                for product_stats in products_stats:
                    await self._analyze_product_trend(product_stats, repo)

                break

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç—Ä–µ–Ω–¥–æ–≤: {e}")

    async def _analyze_product_trend(self, product_stats: Dict[str, Any], repo: ReviewAnalyticsRepository):
        """–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø—Ä–æ–¥—É–∫—Ç—É"""
        try:
            product_name = product_stats.get('product', 'Unknown')
            total_reviews = product_stats.get('total_reviews', 0)
            negative_count = product_stats.get('negative_count', 0)
            negative_rate = product_stats.get('negative_rate', 0)

            logger.info(
                f"üìä –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∞ '{product_name}': {negative_count} –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –∏–∑ {total_reviews} ({negative_rate}%)")

            condition1 = total_reviews >= self.notification_threshold
            condition2 = negative_rate >= 60
            condition3 = self._can_send_notification(product_name)

            logger.info(
                f"‚úÖ –£—Å–ª–æ–≤–∏—è –¥–ª—è '{product_name}': reviews>={self.notification_threshold}? {condition1}, negative>=60%? {condition2}, cooldown? {condition3}")

            if condition1 and condition2 and condition3:
                logger.info(
                    f"üö® –í–°–ï –£–°–õ–û–í–ò–Ø –í–´–ü–û–õ–ù–ï–ù–´! –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è '{product_name}' ({negative_rate}% –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö)")

                regions_list = await self._get_problem_regions(product_name, repo)

                await self._send_negative_trend_notification({
                    'product': product_name,
                    'negative_count': negative_count,
                    'total_count': total_reviews,
                    'negative_percentage': negative_rate,
                    'regions': regions_list,
                    'timestamp': datetime.now()
                })

                self.last_notification_time[product_name] = datetime.now()
            else:
                logger.info(f"‚ùå –£—Å–ª–æ–≤–∏—è –ù–ï –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –¥–ª—è '{product_name}'")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ {product_stats}: {e}")

    async def _get_problem_regions(self, product_name: str, repo: ReviewAnalyticsRepository) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–≥–∏–æ–Ω—ã —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É"""
        try:
            recent_time = datetime.now() - timedelta(hours=2)
            filters = ReviewFilters(
                product=product_name,
                date_from=recent_time,
                rating='negative'
            )

            regional_stats = await repo.get_regional_stats(filters, limit=5)

            regions = []
            for stats in regional_stats[:3]:
                region_name = stats.get('region_name', 'Unknown')
                if region_name != 'Unknown':
                    regions.append(region_name)

            return regions if regions else ["–†–∞–∑–ª–∏—á–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã"]

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–≥–∏–æ–Ω—ã –¥–ª—è {product_name}: {e}")
            return ["–†–∞–∑–ª–∏—á–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã"]

    def _can_send_notification(self, product_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å cooldown –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
        last_time = self.last_notification_time.get(product_name)

        if last_time is None:
            return True

        time_diff = datetime.now() - last_time
        can_send = time_diff.total_seconds() > (self.notification_cooldown_minutes * 60)

        if not can_send:
            logger.info(
                f"‚è≥ Cooldown –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è '{product_name}' (–æ—Å—Ç–∞–ª–æ—Å—å {self.notification_cooldown_minutes - int(time_diff.total_seconds() / 60)} –º–∏–Ω)")

        return can_send

    async def _send_negative_trend_notification(self, trend_data: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–º —Ç—Ä–µ–Ω–¥–µ"""
        try:
            product = trend_data['product']
            negative_count = trend_data['negative_count']
            total_count = trend_data['total_count']
            negative_percentage = trend_data['negative_percentage']
            regions = trend_data['regions']
            timestamp = trend_data['timestamp']

            regions_text = ", ".join(regions) if regions else "–†–∞–∑–ª–∏—á–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã"

            message_text = f"""üö® <b>–£–í–ï–î–û–ú–õ–ï–ù–ò–ï!</b>

üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–µ–∑–∫–∏–π —Ä–æ—Å—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É <b>"{product}"</b>

üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {total_count}
‚Ä¢ –ù–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö: {negative_count} ({negative_percentage}%)
‚Ä¢ –†–µ–≥–∏–æ–Ω—ã: {regions_text}

ü§ñ PulseAI Monitoring System"""

            payload = {
                "text": message_text,
                "parse_mode": "HTML",
                "disable_notification": False
            }

            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram...")
            success = await self._send_to_telegram_bot(payload)

            if success:
                logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è '{product}' ({negative_percentage}% –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö)")
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è '{product}'")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    async def _send_to_telegram_bot(self, payload: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å POST –∑–∞–ø—Ä–æ—Å –≤ Telegram –±–æ—Ç–∞"""
        try:
            logger.info(f"üåê –û—Ç–ø—Ä–∞–≤–ª—è—é POST –∑–∞–ø—Ä–æ—Å –Ω–∞ {self.telegram_bot_url}")

            timeout = httpx.Timeout(connect=10.0, read=30.0, write=10.0, pool=5.0)

            async with httpx.AsyncClient(timeout=timeout) as client:
                response = await client.post(
                    self.telegram_bot_url,
                    json=payload,
                    headers={"Content-Type": "application/json"}
                )

                logger.info(f"üì° –û—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞: {response.status_code}")

                if response.status_code == 200:
                    logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –±–æ—Ç–∞")
                    return True
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –±–æ—Ç–∞: {response.status_code} - {response.text}")
                    return False

        except httpx.TimeoutException:
            logger.error("‚è±Ô∏è Timeout –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram –±–æ—Ç–∞")
            return False
        except httpx.ConnectError as e:
            logger.error(f"üîå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É: {e}")
            return False
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –±–æ—Ç–∞: {e}")
            return False

    async def send_daily_report(self):
        """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç"""
        pass


monitoring_service = ReviewMonitoringService()
