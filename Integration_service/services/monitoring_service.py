# # services/monitoring_service.py
# import asyncio
# import logging
# from datetime import datetime, timedelta
# from typing import List, Dict, Any, Optional
# import httpx
# from apscheduler.schedulers.asyncio import AsyncIOScheduler
# from apscheduler.triggers.interval import IntervalTrigger
# from apscheduler.triggers.cron import CronTrigger
#
# from repository import ReviewAnalyticsRepository
# from core.database import get_async_session
# from schemas.review_schemas import ReviewFilters
# from core.config import configs
#
# logger = logging.getLogger(__name__)
#
#
# class ReviewMonitoringService:
#     def __init__(self,
#                  telegram_bot_url: str = None,
#                  notification_threshold: int = 3,
#                  check_interval_minutes: int = 10):
#
#         self.telegram_bot_url = telegram_bot_url or getattr(configs, 'TELEGRAM_BOT_WEBHOOK_URL', None)
#         self.notification_threshold = notification_threshold
#         self.check_interval_minutes = check_interval_minutes
#         self.scheduler = AsyncIOScheduler()
#
#         # –ö—ç—à –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
#         self.last_notification_time = None
#         self.notification_cooldown_minutes = 30
#         self.is_monitoring_enabled = bool(self.telegram_bot_url)
#
#     async def start_monitoring(self):
#         """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
#         if not self.is_monitoring_enabled:
#             logger.warning("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω: –Ω–µ —É–∫–∞–∑–∞–Ω TELEGRAM_BOT_WEBHOOK_URL")
#             return
#
#         logger.info("–ó–∞–ø—É—Å–∫ —Å–ª—É–∂–±—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Ç–∑—ã–≤–æ–≤")
#
#         # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤ –∫–∞–∂–¥—ã–µ N –º–∏–Ω—É—Ç
#         self.scheduler.add_job(
#             func=self.check_recent_reviews,
#             trigger=IntervalTrigger(minutes=self.check_interval_minutes),
#             id='review_monitoring',
#             name='–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–∑—ã–≤–æ–≤',
#             replace_existing=True,
#             max_instances=1
#         )
#
#         # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –≤ 9:00
#         self.scheduler.add_job(
#             func=self.send_daily_report,
#             trigger=CronTrigger(hour=9, minute=0),
#             id='daily_report',
#             name='–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –æ—Ç–∑—ã–≤–∞–º',
#             replace_existing=True
#         )
#
#         self.scheduler.start()
#         logger.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ {self.check_interval_minutes} –º–∏–Ω—É—Ç")
#
#     async def stop_monitoring(self):
#         """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
#         if self.scheduler.running:
#             self.scheduler.shutdown(wait=False)
#             logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
#
#     async def check_recent_reviews(self):
#         """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã –Ω–∞ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã"""
#         try:
#             logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–∑—ã–≤–æ–≤...")
#
#             async for session in get_async_session():
#                 repo = ReviewAnalyticsRepository(session)
#
#                 # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã –∑–∞ 2 —á–∞—Å–∞
#                 recent_reviews = await repo.get_recent_activity(minutes_back=120, limit=20)
#
#                 if len(recent_reviews) >= self.notification_threshold:
#                     negative_trend = self._detect_negative_trend(recent_reviews)
#
#                     if negative_trend and self._can_send_notification():
#                         await self._send_negative_trend_alert(negative_trend)
#                         self.last_notification_time = datetime.now()
#
#                 break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ async generator
#
#         except Exception as e:
#             logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–∑—ã–≤–æ–≤: {e}")
#
#     def _detect_negative_trend(self, reviews: List[Dict[str, Any]]) -> Optional[Dict[str, Any]]:
#         """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–Ω–¥"""
#         if len(reviews) < self.notification_threshold:
#             return None
#
#         # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã
#         latest_reviews = reviews[:self.notification_threshold]
#         negative_count = sum(1 for review in latest_reviews if review.get('rating') == 'negative')
#
#         negative_percentage = (negative_count / len(latest_reviews)) * 100
#
#         if negative_percentage >= 70:  # 70% –∏–ª–∏ –±–æ–ª—å—à–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö
#             return {
#                 'total_reviews': len(latest_reviews),
#                 'negative_count': negative_count,
#                 'negative_percentage': round(negative_percentage, 1),
#                 'reviews': latest_reviews[:3],  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
#                 'alert_type': 'negative_trend'
#             }
#
#         return None
#
#     def _can_send_notification(self) -> bool:
#         """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å cooldown"""
#         if self.last_notification_time is None:
#             return True
#
#         time_diff = datetime.now() - self.last_notification_time
#         return time_diff.total_seconds() > (self.notification_cooldown_minutes * 60)
#
#     async def _send_negative_trend_alert(self, trend_data: Dict[str, Any]):
#         """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–º —Ç—Ä–µ–Ω–¥–µ"""
#         if not self.telegram_bot_url:
#             logger.warning("Telegram URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
#             return
#
#         message = {
#             "alert_type": "negative_trend",
#             "message": f"üö® –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–Ω–¥ –≤ –æ—Ç–∑—ã–≤–∞—Ö!\n\n"
#                        f"üìä –ü–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–∑—ã–≤–æ–≤: {trend_data['total_reviews']}\n"
#                        f"üëé –ù–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö: {trend_data['negative_count']} ({trend_data['negative_percentage']}%)\n"
#                        f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M %d.%m.%Y')}\n\n"
#                        f"–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –∫–∞—á–µ—Å—Ç–≤—É –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è!",
#             "priority": "high",
#             "data": trend_data
#         }
#
#         await self._send_telegram_notification(message)
#
#     async def send_daily_report(self):
#         """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç"""
#         try:
#             logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
#
#             async for session in get_async_session():
#                 repo = ReviewAnalyticsRepository(session)
#
#                 # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—á–µ—Ä–∞
#                 yesterday = datetime.now() - timedelta(days=1)
#                 filters_yesterday = ReviewFilters(
#                     date_from=yesterday.replace(hour=0, minute=0, second=0),
#                     date_to=yesterday.replace(hour=23, minute=59, second=59)
#                 )
#
#                 sentiment_data = await repo.get_sentiment_distribution(filters_yesterday)
#                 total_reviews = sum(sentiment_data.values())
#
#                 if total_reviews > 0:
#                     positive_pct = round((sentiment_data.get('positive', 0) / total_reviews * 100), 1)
#                     negative_pct = round((sentiment_data.get('negative', 0) / total_reviews * 100), 1)
#
#                     message = {
#                         "alert_type": "daily_report",
#                         "message": f"üìà –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ {yesterday.strftime('%d.%m.%Y')}\n\n"
#                                    f"üìä –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {total_reviews}\n"
#                                    f"‚úÖ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö: {positive_pct}%\n"
#                                    f"‚ùå –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö: {negative_pct}%",
#                         "priority": "low",
#                         "data": {"total_reviews": total_reviews, "sentiment_distribution": sentiment_data}
#                     }
#
#                     await self._send_telegram_notification(message)
#
#                 break
#
#         except Exception as e:
#             logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞: {e}")
#
#     async def _send_telegram_notification(self, notification_data: Dict[str, Any]):
#         """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram"""
#         try:
#             async with httpx.AsyncClient(timeout=30.0) as client:
#                 response = await client.post(
#                     self.telegram_bot_url,
#                     json=notification_data,
#                     headers={"Content-Type": "application/json"}
#                 )
#
#                 if response.status_code == 200:
#                     logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {notification_data['alert_type']}")
#                 else:
#                     logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status_code} - {response.text}")
#
#         except Exception as e:
#             logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
#
#     async def manual_check(self) -> Dict[str, Any]:
#         """–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
#         await self.check_recent_reviews()
#         return {
#             "status": "manual_check_completed",
#             "timestamp": datetime.now().isoformat(),
#             "last_notification": self.last_notification_time.isoformat() if self.last_notification_time else None,
#             "monitoring_enabled": self.is_monitoring_enabled
#         }
