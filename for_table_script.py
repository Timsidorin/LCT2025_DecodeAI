import pandas as pd
from concurrent.futures import ThreadPoolExecutor
from functools import lru_cache
from tqdm import tqdm
import re
import time
import os
from DataMining_service.GEO_service.get_region import get_region_dadata


@lru_cache(maxsize=2000)
def cached_get_region(city):
    """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API DaData"""
    return get_region_dadata(city)


def detect_gender_by_keywords(text):
    """
    –£–õ–£–ß–®–ï–ù–ù–û–ï –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤ —Ç–µ–∫—Å—Ç–µ
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: '–ú' (–º—É–∂—Å–∫–æ–π), '–ñ' (–∂–µ–Ω—Å–∫–∏–π), '' (–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω)
    """
    if not text or pd.isna(text):
        return ""

    text = str(text).lower()

    # –ú–£–ñ–°–ö–ò–ï –ú–ê–†–ö–ï–†–´ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫)
    male_keywords = [
        # –ü—Ä—è–º—ã–µ —É–∫–∞–∑–∞–Ω–∏—è
        '–º—É–∂—á–∏–Ω–∞', '–ø–∞—Ä–µ–Ω—å', '–º—É–∂', '–æ—Ç–µ—Ü', '–ø–∞–ø–∞', '—Å—ã–Ω', '–±—Ä–∞—Ç', '–¥–µ–¥—É—à–∫–∞', '–º–∞–ª—å—á–∏–∫',
        '–≥–æ—Å–ø–æ–¥–∏–Ω', '–º—É–∂—Å–∫–æ–≥–æ –ø–æ–ª–∞', '–¥–∂–µ–Ω—Ç–ª—å–º–µ–Ω',

        # –ö–õ–Æ–ß–ï–í–´–ï –ú–£–ñ–°–ö–ò–ï –ì–õ–ê–ì–û–õ–´ –í –ü–†–û–®–ï–î–®–ï–ú –í–†–ï–ú–ï–ù–ò
        '—Ä–µ—à–∏–ª', '–ø–æ—à–µ–ª', '—Å–¥–µ–ª–∞–ª', '–∫—É–ø–∏–ª', '–≤–∑—è–ª', '–Ω–∞–ø–∏—Å–∞–ª', '–ø–æ–∑–≤–æ–Ω–∏–ª', '–ø—Ä–∏–µ—Ö–∞–ª',
        '–æ—Å—Ç–∞–ª—Å—è', '—É—à–µ–ª', '–ø–æ–ø—Ä–æ—Å–∏–ª', '–ø–æ–ª—É—á–∏–ª', '–æ–ø–ª–∞—Ç–∏–ª', '–∑–∞–ø–ª–∞—Ç–∏–ª', '–æ—Ç–∫—Ä—ã–ª', '–∑–∞–∫—Ä—ã–ª',
        '—Ä–∞–±–æ—Ç–∞–ª', '—Å–ª—É–∂–∏–ª', '—É—á–∏–ª—Å—è', '–∂–∏–ª', '–±—ã–ª –¥–æ–≤–æ–ª–µ–Ω', '–±—ã–ª –Ω–µ–¥–æ–≤–æ–ª–µ–Ω', '–±—ã–ª —Ä–∞–¥',
        '—Å—Ç–∞–ª –∫–ª–∏–µ–Ω—Ç–æ–º', '–æ–±—Ä–∞—Ç–∏–ª—Å—è', '–≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è', '–ø–æ–¥–∫–ª—é—á–∏–ª—Å—è', '–æ—Ç–∫–ª—é—á–∏–ª—Å—è',
        '–ø—Ä–∏–≥–ª–∞—Å–∏–ª', '—Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –Ω–µ —Å–º–æ–≥', '–ø–æ–Ω—è–ª', '—É–∑–Ω–∞–ª', '–≤—ã—è—Å–Ω–∏–ª', '–¥–æ–≥–æ–≤–æ—Ä–∏–ª—Å—è',

        # –ü—Ä–∏—á–∞—Å—Ç–∏—è –∏ –¥–µ–µ–ø—Ä–∏—á–∞—Å—Ç–∏—è –º—É–∂—Å–∫–æ–≥–æ —Ä–æ–¥–∞
        '–æ—Ñ–æ—Ä–º–∏–≤', '–ø–æ–ª—É—á–∏–≤', '–ø—Ä–∏–¥—è', '–∫—É–ø–∏–≤—à–∏–π', '–≤–∑—è–≤—à–∏–π', '—Ä–µ—à–∏–≤—à–∏–π',

        # –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
        '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç', '–∏–Ω–∂–µ–Ω–µ—Ä', '–≤–æ–¥–∏—Ç–µ–ª—å', '—Å–ª–µ—Å–∞—Ä—å', '—ç–ª–µ–∫—Ç—Ä–∏–∫', '—Å—Ç—Ä–æ–∏—Ç–µ–ª—å',
        '–≤–æ–µ–Ω–Ω—ã–π', '—Å–æ–ª–¥–∞—Ç', '–æ—Ñ–∏—Ü–µ—Ä', '—Å–µ—Ä–∂–∞–Ω—Ç', '–∫–∞–ø–∏—Ç–∞–Ω', '–º–∞–π–æ—Ä',

        # –ú—É–∂—Å–∫–∏–µ –∏–º–µ–Ω–∞
        '–∞–ª–µ–∫—Å–∞–Ω–¥—Ä', '–¥–º–∏—Ç—Ä–∏–π', '–º–∞–∫—Å–∏–º', '—Å–µ—Ä–≥–µ–π', '–∞–Ω–¥—Ä–µ–π', '–∞–ª–µ–∫—Å–µ–π', '–∞—Ä—Ç–µ–º', '–∏–ª—å—è',
        '–∏–≤–∞–Ω', '—Ä–æ–º–∞–Ω', '–º–∏—Ö–∞–∏–ª', '–¥–∞–Ω–∏–∏–ª', '–µ–≥–æ—Ä', '–Ω–∏–∫–∏—Ç–∞', '–º–∞—Ç–≤–µ–π', '—Ç–∏–º—É—Ä',
        '–≤–ª–∞–¥–∏–º–∏—Ä', '–Ω–∏–∫–æ–ª–∞–π', '–∞–Ω—Ç–æ–Ω', '–ø–∞–≤–µ–ª', '–¥–µ–Ω–∏—Å', '—é—Ä–∏–π', '—Å—Ç–∞–Ω–∏—Å–ª–∞–≤',

        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —Ñ—Ä–∞–∑—ã
        '—Å–ª—É–∂–∏–ª –≤ –∞—Ä–º–∏–∏', '–±—ã–ª –≤ –∞—Ä–º–∏–∏', '–æ—Ç—Å–ª—É–∂–∏–ª', '–∫–∞–∫ –º—É–∂—á–∏–Ω–∞', '–±—É–¥—É—á–∏ –º—É–∂—á–∏–Ω–æ–π'
    ]

    # –ñ–ï–ù–°–ö–ò–ï –ú–ê–†–ö–ï–†–´ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫)
    female_keywords = [
        # –ü—Ä—è–º—ã–µ —É–∫–∞–∑–∞–Ω–∏—è
        '–∂–µ–Ω—â–∏–Ω–∞', '–¥–µ–≤—É—à–∫–∞', '–∂–µ–Ω–∞', '–º–∞—Ç—å', '–º–∞–º–∞', '–¥–æ—á—å', '—Å–µ—Å—Ç—Ä–∞', '–±–∞–±—É—à–∫–∞', '–¥–µ–≤–æ—á–∫–∞',
        '–≥–æ—Å–ø–æ–∂–∞', '–∂–µ–Ω—Å–∫–æ–≥–æ –ø–æ–ª–∞', '–ª–µ–¥–∏', '–¥–∞–º–∞', '—Ç–µ—Ç—è',

        # –ö–õ–Æ–ß–ï–í–´–ï –ñ–ï–ù–°–ö–ò–ï –ì–õ–ê–ì–û–õ–´ –í –ü–†–û–®–ï–î–®–ï–ú –í–†–ï–ú–ï–ù–ò
        '—Ä–µ—à–∏–ª–∞', '–ø–æ—à–ª–∞', '—Å–¥–µ–ª–∞–ª–∞', '–∫—É–ø–∏–ª–∞', '–≤–∑—è–ª–∞', '–Ω–∞–ø–∏—Å–∞–ª–∞', '–ø–æ–∑–≤–æ–Ω–∏–ª–∞', '–ø—Ä–∏–µ—Ö–∞–ª–∞',
        '–æ—Å—Ç–∞–ª–∞—Å—å', '—É—à–ª–∞', '–ø–æ–ø—Ä–æ—Å–∏–ª–∞', '–ø–æ–ª—É—á–∏–ª–∞', '–æ–ø–ª–∞—Ç–∏–ª–∞', '–∑–∞–ø–ª–∞—Ç–∏–ª–∞', '–æ—Ç–∫—Ä—ã–ª–∞', '–∑–∞–∫—Ä—ã–ª–∞',
        '—Ä–∞–±–æ—Ç–∞–ª–∞', '—É—á–∏–ª–∞—Å—å', '–∂–∏–ª–∞', '–±—ã–ª–∞ –¥–æ–≤–æ–ª—å–Ω–∞', '–±—ã–ª–∞ –Ω–µ–¥–æ–≤–æ–ª—å–Ω–∞', '–±—ã–ª–∞ —Ä–∞–¥–∞',
        '—Å—Ç–∞–ª–∞ –∫–ª–∏–µ–Ω—Ç–∫–æ–π', '–æ–±—Ä–∞—Ç–∏–ª–∞—Å—å', '–≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å', '–ø–æ–¥–∫–ª—é—á–∏–ª–∞—Å—å', '–æ—Ç–∫–ª—é—á–∏–ª–∞—Å—å',
        '—Ä–æ–¥–∏–ª–∞', '–∫–æ—Ä–º–∏–ª–∞', '–≤–æ—Å–ø–∏—Ç—ã–≤–∞–ª–∞', '–≤—ã—à–ª–∞ –∑–∞–º—É–∂', '—Ä–∞–∑–≤–µ–ª–∞—Å—å', '—Ö–æ—Ç–µ–ª–∞ —É–∑–Ω–∞—Ç—å',
        '—Å–æ–±–∏—Ä–∞—é—Å—å –≤ –∞—Ä–º–µ–Ω–∏—é', '—Å–ø—Ä–æ—Å–∏–ª–∞', '—É—Ç–æ—á–Ω–∏–ª–∞', '–ø–æ–Ω—è–ª–∞', '—É–∑–Ω–∞–ª–∞', '–≤—ã—è—Å–Ω–∏–ª–∞',

        # –ü—Ä–∏—á–∞—Å—Ç–∏—è –∂–µ–Ω—Å–∫–æ–≥–æ —Ä–æ–¥–∞
        '–æ—Ñ–æ—Ä–º–∏–≤', '–ø–æ–ª—É—á–∏–≤', '–ø—Ä–∏–¥—è', '–∫—É–ø–∏–≤—à–∞—è', '–≤–∑—è–≤—à–∞—è', '—Ä–µ—à–∏–≤—à–∞—è',

        # –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
        '–≤–æ—Å–ø–∏—Ç–∞—Ç–µ–ª—å–Ω–∏—Ü–∞', '—É—á–∏—Ç–µ–ª—å–Ω–∏—Ü–∞', '–º–µ–¥—Å–µ—Å—Ç—Ä–∞', '–ø—Ä–æ–¥–∞–≤—â–∏—Ü–∞', '–∫–∞—Å—Å–∏—Ä—à–∞',
        '—Å–µ–∫—Ä–µ—Ç–∞—Ä—à–∞', '–±—É—Ö–≥–∞–ª—Ç–µ—Ä', '—ç–∫–æ–Ω–æ–º–∏—Å—Ç', '–º–µ–Ω–µ–¥–∂–µ—Ä', '–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç',

        # –ñ–µ–Ω—Å–∫–∏–µ –∏–º–µ–Ω–∞
        '–∞–Ω–Ω–∞', '–º–∞—Ä–∏—è', '–µ–ª–µ–Ω–∞', '–Ω–∞—Ç–∞–ª—å—è', '–æ–ª—å–≥–∞', '—Ç–∞—Ç—å—è–Ω–∞', '–∏—Ä–∏–Ω–∞', '—Å–≤–µ—Ç–ª–∞–Ω–∞',
        '–µ–∫–∞—Ç–µ—Ä–∏–Ω–∞', '–ª—é–¥–º–∏–ª–∞', '–≥–∞–ª–∏–Ω–∞', '–Ω–∏–Ω–∞', '–≤–∞–ª–µ–Ω—Ç–∏–Ω–∞', '–ª—é–±–æ–≤—å', '–∞–ª–ª–∞',
        '—é–ª–∏—è', '–≤–∏–∫—Ç–æ—Ä–∏—è', '–¥–∞—Ä—å—è', '–∫–∞—Ä–∏–Ω–∞', '–∞–ª–∏–Ω–∞', '–≤–µ—Ä–∞', '–Ω–∞–¥–µ–∂–¥–∞', '—Å–æ—Ñ—å—è',

        # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –∂–µ–Ω—Å–∫–∏–µ —Ñ—Ä–∞–∑—ã
        '–±—ã–ª–∞ –±–µ—Ä–µ–º–µ–Ω–Ω–∞', '—Ä–æ–∂–∞–ª–∞', '–∫–æ—Ä–º–ª—é –≥—Ä—É–¥—å—é', '–≤ –¥–µ–∫—Ä–µ—Ç–µ', '–º–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤–æ',
        '–∫–∞–∫ –º–∞–º–∞', '–∫–∞–∫ –∂–µ–Ω—â–∏–Ω–∞'
    ]

    # –°—á–µ—Ç—á–∏–∫–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    male_score = 0
    female_score = 0

    # –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –º—É–∂—Å–∫–∏—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
    for keyword in male_keywords:
        if keyword in text:
            # –î–∞–µ–º –±–æ–ª—å—à–∏–π –≤–µ—Å –∫–ª—é—á–µ–≤—ã–º –≥–ª–∞–≥–æ–ª–∞–º –∏ –ø—Ä—è–º—ã–º —É–∫–∞–∑–∞–Ω–∏—è–º
            if keyword in ['–º—É–∂—á–∏–Ω–∞', '–ø–∞—Ä–µ–Ω—å', '–º—É–∂', '–æ—Ç–µ—Ü', '–ø–∞–ø–∞']:
                male_score += 5  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            elif keyword in ['—Ä–µ—à–∏–ª', '–ø–æ—à–µ–ª', '—Å–¥–µ–ª–∞–ª', '–∫—É–ø–∏–ª', '–≤–∑—è–ª', '–Ω–∞–ø–∏—Å–∞–ª', '–ø–æ–∑–≤–æ–Ω–∏–ª', '–ø—Ä–∏–≥–ª–∞—Å–∏–ª']:
                male_score += 3  # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —á–µ—Ç–∫–∏—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
            else:
                male_score += 1

    # –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –∂–µ–Ω—Å–∫–∏—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
    for keyword in female_keywords:
        if keyword in text:
            # –î–∞–µ–º –±–æ–ª—å—à–∏–π –≤–µ—Å –∫–ª—é—á–µ–≤—ã–º –≥–ª–∞–≥–æ–ª–∞–º –∏ –ø—Ä—è–º—ã–º —É–∫–∞–∑–∞–Ω–∏—è–º
            if keyword in ['–∂–µ–Ω—â–∏–Ω–∞', '–¥–µ–≤—É—à–∫–∞', '–∂–µ–Ω–∞', '–º–∞—Ç—å', '–º–∞–º–∞']:
                female_score += 5  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            elif keyword in ['—Ä–µ—à–∏–ª–∞', '–ø–æ—à–ª–∞', '—Å–¥–µ–ª–∞–ª–∞', '–∫—É–ø–∏–ª–∞', '–≤–∑—è–ª–∞', '–Ω–∞–ø–∏—Å–∞–ª–∞', '–ø–æ–∑–≤–æ–Ω–∏–ª–∞', '—Ö–æ—Ç–µ–ª–∞']:
                female_score += 3  # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            else:
                female_score += 1

    # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–†–û–í–ï–†–ö–ò —á–µ—Ä–µ–∑ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º—É–∂—Å–∫–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≥–ª–∞–≥–æ–ª–æ–≤
    male_verb_patterns = [
        r'\b\w+–∏–ª\b',  # —Ä–µ—à–∏–ª, –∫—É–ø–∏–ª, —Å–¥–µ–ª–∞–ª
        r'\b\w+–∞–ª\b',  # –ø–∏—Å–∞–ª, —á–∏—Ç–∞–ª, —Ä–∞–±–æ—Ç–∞–ª
        r'\b\w+–µ–ª\b',  # —Ö–æ—Ç–µ–ª, —É–º–µ–ª, —Å–º–æ—Ç—Ä–µ–ª
        r'\b\w+—ë–ª\b',  # –ø–æ—à—ë–ª, –Ω–∞—à—ë–ª
    ]

    for pattern in male_verb_patterns:
        matches = re.findall(pattern, text)
        male_score += len(matches) * 2  # –ö–∞–∂–¥–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ +2 –±–∞–ª–ª–∞

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∂–µ–Ω—Å–∫–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≥–ª–∞–≥–æ–ª–æ–≤
    female_verb_patterns = [
        r'\b\w+–∏–ª–∞\b',  # —Ä–µ—à–∏–ª–∞, –∫—É–ø–∏–ª–∞, —Å–¥–µ–ª–∞–ª–∞
        r'\b\w+–∞–ª–∞\b',  # –ø–∏—Å–∞–ª–∞, —á–∏—Ç–∞–ª–∞, —Ä–∞–±–æ—Ç–∞–ª–∞
        r'\b\w+–µ–ª–∞\b',  # —Ö–æ—Ç–µ–ª–∞, —É–º–µ–ª–∞, —Å–º–æ—Ç—Ä–µ–ª–∞
        r'\b\w+—ë–ª–∞\b',  # –ø–æ—à–ª–∞, –Ω–∞—à–ª–∞
    ]

    for pattern in female_verb_patterns:
        matches = re.findall(pattern, text)
        female_score += len(matches) * 2

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª —Å —É—á–µ—Ç–æ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞
    if female_score > male_score and female_score >= 2:
        return "–ñ"
    elif male_score > female_score and male_score >= 2:
        return "–ú"
    else:
        return ""


def process_cities_batch(cities_list):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–∞—Ç—á –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–æ–≤ —Ä–µ–≥–∏–æ–Ω–æ–≤"""
    return [cached_get_region(city) for city in cities_list]


def save_with_retry(df, base_filename):
    """–ü—ã—Ç–∞–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª —Å —Ä–∞–∑–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –≤ —Å–ª—É—á–∞–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
    timestamp = int(time.time())
    attempts = [
        f"{base_filename.split('.')[0]}_{timestamp}.csv",
        f"dataset_processed_{timestamp}.csv",
        os.path.join(os.path.expanduser("~"), "Desktop", f"dataset_cleaned_{timestamp}.csv"),
        os.path.join(os.path.expanduser("~"), "Downloads", f"dataset_cleaned_{timestamp}.csv")
    ]

    for filename in attempts:
        try:
            df.to_csv(filename,
                      encoding='windows-1251',
                      index=False,
                      sep=';')
            print(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫: {filename}")
            return filename
        except PermissionError:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: {filename}")
            continue

    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª –Ω–∏ –≤ –æ–¥–Ω—É –∏–∑ –ø–∞–ø–æ–∫!")
    return None


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    print("üöÄ –ó–ê–ü–£–°–ö –°–£–ü–ï–†-–ë–´–°–¢–†–û–ô –û–ë–†–ê–ë–û–¢–ö–ò –î–ê–ù–ù–´–•")
    print("=" * 50)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    print("üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")
    try:
        df = pd.read_csv('CompleteDataset.csv',
                         encoding='windows-1251',
                         engine='python',
                         on_bad_lines='skip',
                         sep=None)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        return

    # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤
    print("üßπ –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤...")
    df['–ì–æ—Ä–æ–¥'] = df['–ì–æ—Ä–æ–¥'].str.split('(').str[0].str.strip()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª –ø–æ —Ç–µ–∫—Å—Ç—É –æ—Ç–∑—ã–≤–∞
    text_columns = ['–¢–µ–∫—Å—Ç', '–û—Ç–∑—ã–≤', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ', '–û–ø–∏—Å–∞–Ω–∏–µ', '–°–æ–æ–±—â–µ–Ω–∏–µ']
    text_column = None

    for col in text_columns:
        if col in df.columns:
            text_column = col
            break

    if text_column:
        print(f"üë• –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª –ø–æ —Å—Ç–æ–ª–±—Ü—É '{text_column}'...")
        df['–ü–æ–ª'] = df[text_column].apply(detect_gender_by_keywords)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª–∞
        gender_stats = df['–ü–æ–ª'].value_counts()
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª–∞:")
        print(f"   –ú—É–∂—Å–∫–æ–π (–ú): {gender_stats.get('–ú', 0)}")
        print(f"   –ñ–µ–Ω—Å–∫–∏–π (–ñ): {gender_stats.get('–ñ', 0)}")
        print(f"   –ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω: {gender_stats.get('', 0)}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
        print("\nüîç –ü—Ä–∏–º–µ—Ä—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª–∞:")
        for gender in ['–ú', '–ñ']:
            sample = df[df['–ü–æ–ª'] == gender].head(2)
            for _, row in sample.iterrows():
                text_preview = str(row[text_column])[:80] + "..."
                print(f"   {gender}: {text_preview}")
    else:
        print("‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª–∞")
        df['–ü–æ–ª'] = ""

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –∫–æ–¥–æ–≤ —Ä–µ–≥–∏–æ–Ω–æ–≤
    unique_cities = df['–ì–æ—Ä–æ–¥'].nunique()
    total_cities = len(df)
    print(f"\nüåç –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–æ–≤:")
    print(f"   –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {total_cities}")
    print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤: {unique_cities}")
    print(f"   –≠–∫–æ–Ω–æ–º–∏—è –∑–∞ —Å—á–µ—Ç –∫—ç—à–∞: {((total_cities - unique_cities) / total_cities * 100):.1f}%")

    # –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–æ–≤
    batch_size = 50
    cities_list = df['–ì–æ—Ä–æ–¥'].tolist()
    batches = [cities_list[i:i + batch_size] for i in range(0, len(cities_list), batch_size)]

    print(f"‚ö° –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(batches)} –±–∞—Ç—á–µ–π –≤ 8 –ø–æ—Ç–æ–∫–æ–≤...")

    start_time = time.time()

    with ThreadPoolExecutor(max_workers=8) as executor:
        results = list(tqdm(
            executor.map(process_cities_batch, batches),
            total=len(batches),
            desc="üöÄ –¢—É—Ä–±–æ-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–æ–≤",
            unit="–±–∞—Ç—á"
        ))

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    flattened_results = []
    for batch_result in results:
        flattened_results.extend(batch_result)

    df['–ö–æ–¥ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏'] = flattened_results

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    elapsed_time = time.time() - start_time
    print(f"\n‚è±Ô∏è  –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {elapsed_time:.1f} —Å–µ–∫ ({elapsed_time / 60:.1f} –º–∏–Ω)")
    print(f"üèÉ –°–∫–æ—Ä–æ—Å—Ç—å: {len(df) / elapsed_time:.1f} —Å—Ç—Ä–æ–∫/—Å–µ–∫")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
    cache_info = cached_get_region.cache_info()
    print(f"üíæ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞: –ø–æ–ø–∞–¥–∞–Ω–∏–π {cache_info.hits}, –ø—Ä–æ–º–∞—Ö–æ–≤ {cache_info.misses}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\nüíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
    saved_file = save_with_retry(df, 'CompleteDataset_with_gender_and_regions.csv')

    if saved_file:
        print(f"üéâ –£–°–ü–ï–®–ù–û! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫")
        print(f"üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {saved_file}")

        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(df)}")
        print(f"   üë• –û–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ–ª: {len(df[df['–ü–æ–ª'] != ''])}")
        print(f"   üåç –û–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≥–æ—Ä–æ–¥–∞: {len(df[df['–ö–æ–¥ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏'] != ''])}")
        print(f"   ‚ö° –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {elapsed_time:.1f} —Å–µ–∫")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞!")


# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
if __name__ == "__main__":
    main()
