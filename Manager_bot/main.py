# main.py –¥–ª—è –±–æ—Ç–∞-–æ–ø–æ–≤–µ—â–∞—Ç–µ–ª—è PulseAI
import asyncio
import json
import logging
import os
from datetime import datetime
from typing import List, Union, Dict, Any

from aiogram import Bot, Dispatcher, Router, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from fastapi import FastAPI, HTTPException, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, field_validator

from config import configs

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
BOT_TOKEN = configs.TOKEN_INFO_BOT
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
router = Router()

# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title=f"{configs.PROJECT_NAME} - Notification Bot",
    description="Telegram –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ä–µ–ø—É—Ç–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–∏—Å–∫–∞—Ö"
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
SUBSCRIBERS_FILE = "subscribers.json"


# ========== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–î–ü–ò–°–ß–ò–ö–ê–ú–ò ==========

class SubscriberStorage:
    def __init__(self, filename: str):
        self.filename = filename
        self.subscribers = self.load_subscribers()

    def load_subscribers(self) -> Dict[str, Dict]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.filename):
                with open(self.filename, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return {}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
            return {}

    def save_subscribers(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.filename, 'w', encoding='utf-8') as f:
                json.dump(self.subscribers, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")

    def add_subscriber(self, user_id: int, user_data: Dict):
        """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞"""
        user_key = str(user_id)
        self.subscribers[user_key] = {
            "user_id": user_id,
            "username": user_data.get("username"),
            "first_name": user_data.get("first_name"),
            "last_name": user_data.get("last_name"),
            "subscribed_at": datetime.now().isoformat(),
            "is_active": True,
            "last_activity": datetime.now().isoformat()
        }
        self.save_subscribers()
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–¥–ø–∏—Å—á–∏–∫: {user_id} (@{user_data.get('username', 'unknown')})")

    def remove_subscriber(self, user_id: int):
        """–£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞"""
        user_key = str(user_id)
        if user_key in self.subscribers:
            del self.subscribers[user_key]
            self.save_subscribers()
            logger.info(f"–£–¥–∞–ª–µ–Ω –ø–æ–¥–ø–∏—Å—á–∏–∫: {user_id}")

    def deactivate_subscriber(self, user_id: int):
        """–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ (–±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)"""
        user_key = str(user_id)
        if user_key in self.subscribers:
            self.subscribers[user_key]["is_active"] = False
            self.save_subscribers()
            logger.info(f"–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ–¥–ø–∏—Å—á–∏–∫: {user_id}")

    def get_active_subscribers(self) -> List[int]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
        return [
            int(user_data["user_id"])
            for user_data in self.subscribers.values()
            if user_data.get("is_active", True)
        ]

    def get_subscribers_count(self) -> Dict[str, int]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
        total = len(self.subscribers)
        active = len(self.get_active_subscribers())
        return {
            "total": total,
            "active": active,
            "inactive": total - active
        }


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
subscriber_storage = SubscriberStorage(SUBSCRIBERS_FILE)


# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î TELEGRAM ==========

@router.message(CommandStart())
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = message.from_user

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏
    subscriber_storage.add_subscriber(user.id, {
        "username": user.username,
        "first_name": user.first_name,
        "last_name": user.last_name
    })

    welcome_text = f"""
ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PulseAI Bot!</b>

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:
üìä –†–µ–∑–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –æ—Ç–∑—ã–≤–∞—Ö
üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–∞—Ö  
üìà –í–∞–∂–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–∞—Ö –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º

<i>–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –∫–æ–º–∞–Ω–¥–æ–π /stop</i>


"""

    await message.answer(welcome_text)


@router.message(Command("stop"))
async def cmd_stop(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop"""
    user = message.from_user
    subscriber_storage.remove_subscriber(user.id)

    await message.answer(
        f"üòî <b>–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
        f"–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–ø—É—Ç–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–∏—Å–∫–∞—Ö, "
        f"–ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start"
    )


# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É
dp.include_router(router)


# ========== PYDANTIC –ú–û–î–ï–õ–ò ==========

class NotificationPayload(BaseModel):
    text: str
    parse_mode: str = "HTML"
    disable_notification: bool = False

    @field_validator('text')
    @classmethod
    def validate_text(cls, v):
        if not v or len(v.strip()) == 0:
            raise ValueError('–¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')
        if len(v) > 4096:
            raise ValueError('–¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç Telegram (4096 —Å–∏–º–≤–æ–ª–æ–≤)')
        return v.strip()


class ReviewAlertPayload(BaseModel):
    review_text: str
    source: str
    rating: str
    region: str = None
    product: str = None
    review_url: str = None


class TrendAlertPayload(BaseModel):
    trend_type: str  # "positive_spike", "negative_spike", "volume_drop"
    product: str
    region: str
    change_percentage: float
    period: str = "–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å"


# ========== –§–£–ù–ö–¶–ò–ò –û–¢–ü–†–ê–í–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ==========

async def send_to_all_subscribers(text: str, parse_mode: str = "HTML", disable_notification: bool = False) -> Dict[
    str, Any]:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
    active_subscribers = subscriber_storage.get_active_subscribers()

    if not active_subscribers:
        return {
            "ok": False,
            "message": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤",
            "sent_count": 0,
            "failed_count": 0
        }

    sent_count = 0
    failed_count = 0
    failed_users = []

    for user_id in active_subscribers:
        try:
            await bot.send_message(
                chat_id=user_id,
                text=text,
                parse_mode=parse_mode if parse_mode != "None" else None,
                disable_notification=disable_notification,
                disable_web_page_preview=True
            )
            sent_count += 1

        except TelegramForbiddenError:
            subscriber_storage.deactivate_subscriber(user_id)
            failed_count += 1
            failed_users.append({"user_id": user_id, "error": "bot_blocked"})

        except TelegramBadRequest as e:
            failed_count += 1
            failed_users.append({"user_id": user_id, "error": str(e)})

        except Exception as e:
            failed_count += 1
            failed_users.append({"user_id": user_id, "error": f"unexpected: {str(e)}"})

        await asyncio.sleep(0.05)

    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count} —É—Å–ø–µ—à–Ω–æ, {failed_count} –Ω–µ—É–¥–∞—á–Ω–æ")

    return {
        "ok": True,
        "message": f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º",
        "sent_count": sent_count,
        "failed_count": failed_count,
        "total_subscribers": len(active_subscribers),
        "failed_users": failed_users[:10]
    }


# ========== FASTAPI –≠–ù–î–ü–û–ò–ù–¢–´ ==========

@app.post("/send-notification")
async def send_notification_endpoint(payload: NotificationPayload, background_tasks: BackgroundTasks):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
    try:
        result = await send_to_all_subscribers(
            text=payload.text,
            parse_mode=payload.parse_mode,
            disable_notification=payload.disable_notification
        )
        return result

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")


# ========== –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ==========

async def start_polling():
    """–ó–∞–ø—É—Å–∫ polling –¥–ª—è Telegram –±–æ—Ç–∞"""
    try:
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ polling: {e}")


@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    try:
        bot_info = await bot.get_me()
        logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @{bot_info.username} (ID: {bot_info.id})")

        stats = subscriber_storage.get_subscribers_count()
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {stats['active']} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–∑ {stats['total']}")
        asyncio.create_task(start_polling())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")


@app.on_event("shutdown")
async def shutdown_event():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
    try:
        await bot.session.close()
        logger.info("–°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")


if __name__ == "__main__":
    import uvicorn

    uvicorn.run(app, host=configs.HOST, port=configs.PORT)
